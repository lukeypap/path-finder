{"version":3,"sources":["components/Node/Node.jsx","components/Board/Board.jsx","components/DropDown.jsx","components/InfoPanel.jsx","pathfindingAlgs/Dijkstra.js","pathfindingAlgs/randomAlg.js","wallAlgs/RecursiveDivision.jsx","components/Board/BoardLogic.jsx","PathFinder.jsx","App.js","reportWebVitals.js","index.js"],"names":["grow","keyframes","Box","styled","span","Wall","StartNode","FinishNode","Node","startNode","finishNode","row","col","wall","hasBeenVisited","onMouseDown","onMouseEnter","onMouseUp","onMouseLeave","id","Board","handleMouseDown","handleMouseUp","handleMouseLeave","handleMouseEnter","board","map","index","style","display","justifyContent","node","nodeIndex","StyledInputLabel","InputLabel","StyledSelect","Select","DropDown","props","name","label","value","onChange","options","error","color","FormControl","variant","fullWidth","option","MenuItem","title","StyledButton","Button","InfoPanel","startAlgorithm","startDijkstra","startRecurseWalls","resetBoard","handleSliderChangeCol","handleSliderChangeRow","useState","selectedAlgorithm","setSelectedAlgorithm","backgroundColor","marginTop","borderRadius","Container","Grid","container","spacing","columns","item","xs","Typography","gutterBottom","Slider","defaultValue","valueLabelDisplay","min","max","marginLeft","onClick","console","log","size","e","target","startIcon","Delete","updateDistancesOfCloseNodes","closeNodes","currentNode","distance","previousNode","sortNodesByDistance","unvisitedSet","sort","nodeA","nodeB","getAllCloseNodes","push","length","filter","chooseRandomNode","Math","floor","random","RecursiveDivision","rows","cols","wallsInOrder","recurseBoard","isHorizontal","i","STARTNODECLASS","ENDNODECLASS","WALLCLASS","EMPTYNODECLASS","BoardLogic","STARTNODE","FINISHNODE","createBoard","ROWS","COLS","nodes","currRow","createNode","Infinity","setRow","setCol","setBoard","mousePressed","setMousePressed","previousStartNode","useRef","previousEndNode","clickedOnTerminalNode","setClickedOnTerminalNode","startOrEnd","setStartOrEnd","getNewBoardWithWall","newBoard","slice","document","getElementById","className","animateWallsInOrder","setTimeout","animateAlgorithm","visitedNodes","shortestPath","animateShortestPath","clearBoard","j","current","updateTerminalNodes","unvisitedNodes","getAllNodes","shift","randomAlg","Dijkstra","endNode","unshift","getShortestPath","PathFinder","CssBaseline","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.bfc69da8.chunk.js","sourcesContent":["import React from \"react\";\r\nimport styled, { keyframes } from \"styled-components\";\r\nimport \"./Node.css\";\r\n\r\nconst grow = keyframes`\r\n  0% {\r\n    transform: scale(0.4)\r\n  }\r\n\r\n  50% {\r\n    transform: scale(0.8)\r\n  }\r\n\r\n  90% {\r\n    transform: scale(1.2)\r\n  }\r\n\r\n  100% {\r\n    transform: scale(1)\r\n  }\r\n`;\r\n\r\nconst Box = styled.span`\r\n  width: 28px;\r\n  height: 28px;\r\n  border: 0.5px solid #cacaca;\r\n`;\r\n\r\nconst Wall = styled.span`\r\n  width: 28px;\r\n  height: 28px;\r\n  background-color: #646464;\r\n  box-shadow: 0px 0px 6px 0px rgba(0, 0, 0, 0.8);\r\n  animation: ${grow} 0.1s linear;\r\n`;\r\n\r\nconst StartNode = styled.span`\r\n  width: 28px;\r\n  height: 28px;\r\n  background-color: #58b358;\r\n  box-shadow: 0px 0px 7px 0px #58b358;\r\n`;\r\n\r\nconst FinishNode = styled.span`\r\n  width: 28px;\r\n  height: 28px;\r\n  background-color: #d17070;\r\n  box-shadow: 0px 0px 7px 0px #d17070;\r\n`;\r\n\r\nconst Node = ({\r\n  startNode,\r\n  finishNode,\r\n  row,\r\n  col,\r\n  hasBeenVisited,\r\n  wall,\r\n  onMouseDown,\r\n  onMouseEnter,\r\n  onMouseUp,\r\n  onMouseLeave,\r\n}) => {\r\n  const chooseNode = () => {\r\n    if (startNode) {\r\n      return (\r\n        <StartNode\r\n          id={`node-${row}-${col}`}\r\n          onMouseDown={() => onMouseDown(row, col)}\r\n          onMouseEnter={() => onMouseEnter(row, col)}\r\n          onMouseUp={() => onMouseUp(row, col)}\r\n          onMouseLeave={() => onMouseLeave(row, col)}\r\n        />\r\n      );\r\n    } else if (finishNode) {\r\n      return (\r\n        <FinishNode\r\n          id={`node-${row}-${col}`}\r\n          onMouseDown={() => onMouseDown(row, col)}\r\n          onMouseEnter={() => onMouseEnter(row, col)}\r\n          onMouseUp={() => onMouseUp()}\r\n          onMouseLeave={() => onMouseLeave(row, col)}\r\n        />\r\n      );\r\n    } else if (wall) {\r\n      return (\r\n        <Wall\r\n          id={`node-${row}-${col}`}\r\n          onMouseDown={() => onMouseDown(row, col)}\r\n          onMouseEnter={() => onMouseEnter(row, col)}\r\n          onMouseUp={() => onMouseUp()}\r\n        />\r\n      );\r\n    } else {\r\n      return (\r\n        <Box\r\n          id={`node-${row}-${col}`}\r\n          onMouseDown={() => onMouseDown(row, col)}\r\n          onMouseEnter={() => onMouseEnter(row, col)}\r\n          onMouseUp={() => onMouseUp()}\r\n        />\r\n      );\r\n    }\r\n  };\r\n\r\n  return <>{chooseNode()}</>;\r\n};\r\n\r\nexport default Node;\r\n","import Node from \"../Node/Node\";\r\n\r\nconst Board = ({ handleMouseDown, handleMouseUp, handleMouseLeave, handleMouseEnter, board }) => {\r\n  return (\r\n    <>\r\n      {board.map((row, index) => {\r\n        return (\r\n          <div key={index} style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n            {row.map((node, nodeIndex) => (\r\n              <Node\r\n                key={nodeIndex}\r\n                startNode={node.startNode}\r\n                finishNode={node.finishNode}\r\n                row={node.row}\r\n                col={node.col}\r\n                hasBeenVisited={node.hasBeenVisited}\r\n                wall={node.wall}\r\n                onMouseDown={(row, col) => {\r\n                  handleMouseDown(row, col);\r\n                }}\r\n                onMouseEnter={(row, col) => {\r\n                  handleMouseEnter(row, col);\r\n                }}\r\n                onMouseUp={() => {\r\n                  handleMouseUp();\r\n                }}\r\n                onMouseLeave={(row, col) => {\r\n                  handleMouseLeave(row, col);\r\n                }}\r\n              />\r\n            ))}\r\n          </div>\r\n        );\r\n      })}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Board;\r\n","import { FormControl, InputLabel, Menu, MenuItem, Select } from \"@mui/material\";\r\nimport React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst StyledInputLabel = styled(InputLabel)`\r\n  && {\r\n    color: white;\r\n  }\r\n`;\r\n\r\nconst StyledSelect = styled(Select)`\r\n  && {\r\n    color: white;\r\n  }\r\n  .MuiSvgIcon-root {\r\n    color: white;\r\n  }\r\n`;\r\n\r\nconst DropDown = (props) => {\r\n  const { name, label, value, onChange, options, error = null, color } = props;\r\n\r\n  return (\r\n    <FormControl variant=\"standard\" fullWidth>\r\n      <StyledInputLabel>Algorithm</StyledInputLabel>\r\n      <StyledSelect value={value} name={name} label={label} onChange={onChange}>\r\n        {options.map((option) => (\r\n          <MenuItem key={option.id} value={option.id}>\r\n            {option.title}\r\n          </MenuItem>\r\n        ))}\r\n      </StyledSelect>\r\n    </FormControl>\r\n  );\r\n};\r\n\r\nexport default DropDown;\r\n","import { Delete } from \"@mui/icons-material\";\r\nimport { Grid, Slider, Typography, Button } from \"@mui/material\";\r\nimport React, { useState } from \"react\";\r\nimport { Container } from \"react-bootstrap\";\r\nimport styled from \"styled-components\";\r\n// import { Button } from \"react-bootstrap\";\r\nimport DropDown from \"./DropDown\";\r\n\r\nconst StyledButton = styled(Button)`\r\n  && {\r\n    margin-top: 8px;\r\n    margin-bottom: 8px;\r\n  }\r\n`;\r\n\r\nconst InfoPanel = ({\r\n  startAlgorithm,\r\n  startDijkstra,\r\n  startRecurseWalls,\r\n  resetBoard,\r\n  handleSliderChangeCol,\r\n  handleSliderChangeRow,\r\n}) => {\r\n  const [selectedAlgorithm, setSelectedAlgorithm] = useState();\r\n  const options = [\r\n    {\r\n      id: 0,\r\n      title: \"None\",\r\n    },\r\n    {\r\n      id: 1,\r\n      title: \"Dijkstra\",\r\n    },\r\n  ];\r\n  const handleInput = (e) => {\r\n    setSelectedAlgorithm(e.target.value);\r\n  };\r\n\r\n  const handleVisualizeOptions = () => {\r\n    if (selectedAlgorithm === 1) {\r\n      startDijkstra();\r\n    } else {\r\n      console.log(\"stop\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div style={{ backgroundColor: \"#3a3a3a\", marginTop: \"0px\", borderRadius: \"0px\" }}>\r\n      <Container>\r\n        <Grid container spacing={2} columns={16}>\r\n          <Grid item xs={4}>\r\n            <div style={{ display: \"flex\" }}>\r\n              <Typography gutterBottom color=\"white\">\r\n                Row\r\n              </Typography>\r\n              <Slider\r\n                defaultValue={20}\r\n                aria-label=\"default\"\r\n                valueLabelDisplay=\"auto\"\r\n                color=\"secondary\"\r\n                min={5}\r\n                max={50}\r\n                onChange={handleSliderChangeRow}\r\n                style={{ marginLeft: \"20px\" }}\r\n              />\r\n            </div>\r\n            <div style={{ display: \"flex\" }}>\r\n              <Typography gutterBottom color=\"white\">\r\n                Col\r\n              </Typography>\r\n              <Slider\r\n                defaultValue={20}\r\n                aria-label=\"Default\"\r\n                valueLabelDisplay=\"auto\"\r\n                min={5}\r\n                max={50}\r\n                onChange={handleSliderChangeCol}\r\n                style={{ marginLeft: \"20px\" }}\r\n              />\r\n            </div>\r\n          </Grid>\r\n          <Grid item xs={8}>\r\n            <StyledButton onClick={handleVisualizeOptions} size=\"large\" variant=\"contained\">\r\n              Visualize\r\n            </StyledButton>\r\n          </Grid>\r\n          <Grid item xs={2}>\r\n            <DropDown\r\n              name=\"Algorithm\"\r\n              label=\"Algorithm\"\r\n              onChange={handleInput}\r\n              options={options}\r\n              value={options.id}\r\n              color=\"white\"\r\n            />\r\n          </Grid>\r\n          <Grid item xs={2}>\r\n            <StyledButton\r\n              size=\"small\"\r\n              onClick={() => resetBoard()}\r\n              variant=\"contained\"\r\n              startIcon={<Delete />}\r\n              color=\"secondary\"\r\n              style={{ marginTop: \"15px\" }}\r\n            >\r\n              Reset\r\n            </StyledButton>\r\n            <StyledButton\r\n              size=\"small\"\r\n              onClick={startRecurseWalls}\r\n              variant=\"contained\"\r\n              startIcon={<Delete />}\r\n              color=\"secondary\"\r\n              style={{ marginTop: \"15px\" }}\r\n            >\r\n              Generate Walls\r\n            </StyledButton>\r\n          </Grid>\r\n        </Grid>\r\n      </Container>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default InfoPanel;\r\n","export function Dijkstra(board) {\r\n    const unvisitedSet = getAllNodes(board)\r\n    const visitedNodes = []\r\n    while (unvisitedSet.length !== 0) {\r\n        sortNodesByDistance(unvisitedSet)\r\n        const currentNode = unvisitedSet.shift()\r\n        currentNode.hasBeenVisited = true\r\n        if (currentNode.wall) continue;\r\n        if (currentNode.distance == Infinity) return visitedNodes;\r\n        // board[currentNode.row][currentNode.col] = currentNode\r\n        visitedNodes.push(currentNode)\r\n        if (currentNode.finishNode === true) return visitedNodes;\r\n        const closeNodes = getAllCloseNodes(board, currentNode);\r\n        updateDistancesOfCloseNodes(closeNodes, currentNode)\r\n    }\r\n}\r\n\r\nfunction updateDistancesOfCloseNodes(closeNodes, currentNode) {\r\n    for(const node of closeNodes) {\r\n        node.distance = currentNode.distance + 1;\r\n        node.previousNode = currentNode;\r\n    }\r\n}\r\n\r\nfunction sortNodesByDistance(unvisitedSet) {\r\n    unvisitedSet.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\r\n  }\r\n\r\nfunction getAllCloseNodes(board, currentNode) {\r\n    const closeNodes = []\r\n    const {row, col} = currentNode\r\n    if (row > 0) closeNodes.push(board[row - 1][col]) //row - 1\r\n    if (col < board[0].length - 1) closeNodes.push(board[row][col + 1]) // col + 1\r\n    if (row < board.length - 1) closeNodes.push(board[row + 1][col]) // row + 1\r\n    if (col > 0) closeNodes.push(board[row][col - 1]) // col - 1\r\n    return closeNodes.filter(node => !node.hasBeenVisited);\r\n}\r\n\r\nfunction getAllNodes(board) {\r\n    const unvisitedNodes = []\r\n    for (let i = 0; i < board.length; i++) {\r\n        for (let j = 0; j < board[i].length; j++) {\r\n            unvisitedNodes.push(board[i][j])\r\n        }\r\n    }\r\n    return unvisitedNodes;\r\n}\r\n\r\nexport function getShortestPath(endNode) {\r\n    const shortestPath = [];\r\n    let currentNode = endNode;\r\n    while (currentNode !== null) {\r\n        shortestPath.unshift(currentNode);\r\n        currentNode = currentNode.previousNode;\r\n    }\r\n    return shortestPath;\r\n}","/*\r\nfrom current node get all closeNodes 1 box away (left, right, up, down) \r\nchoose a random one\r\nchange the node to visited (so it can't visit the same node twice)\r\npush this into the visitedNodes array\r\npop this from the unvisitedNodes array\r\n\r\nwhile the currentNode !== finishNode\r\n*/\r\n\r\nexport function randomAlg(board, startNode, finishNode) {\r\n    const visitedNodes = []\r\n    let unvisitedNodes = getAllNodes(board)\r\n    let currentNode = board[startNode.row][startNode.col]\r\n    while (!!unvisitedNodes.length) {\r\n        currentNode = chooseRandomNode(getAllCloseNodes(board, currentNode))\r\n        while (board[currentNode.row][currentNode.col].hasBeenVisited) {\r\n            currentNode = chooseRandomNode(getAllCloseNodes(board, currentNode))\r\n        }\r\n        currentNode = {...currentNode, hasBeenVisited: true}\r\n        board[currentNode.row][currentNode.col] = currentNode\r\n        visitedNodes.push(currentNode)\r\n        unvisitedNodes = unvisitedNodes.filter(node => !node.hasBeenVisited)\r\n        unvisitedNodes.shift(currentNode)\r\n        if (currentNode.row === finishNode.row && currentNode.col === finishNode.col) {\r\n            console.log(board)\r\n            return visitedNodes\r\n        }\r\n    }\r\n    return visitedNodes;  \r\n}\r\n\r\nfunction getAllCloseNodes(board, currentNode) {\r\n    const closeNodes = []\r\n    const {row, col} = currentNode\r\n    if (row > 0) closeNodes.push(board[currentNode.row - 1][currentNode.col]) //row - 1\r\n    if (col < board[row].length - 1) closeNodes.push(board[currentNode.row][currentNode.col + 1]) // col + 1\r\n    if (row < board.length - 1) closeNodes.push(board[currentNode.row + 1][currentNode.col]) // row + 1\r\n    if (col > 0) closeNodes.push(board[currentNode.row][currentNode.col - 1]) // col - 1\r\n    return closeNodes;\r\n}\r\n\r\nfunction chooseRandomNode(closeNodes) {\r\n    return closeNodes[Math.floor(Math.random() * closeNodes.length)]\r\n}\r\n\r\nfunction getAllNodes(board) {\r\n    const unvisitedNodes = []\r\n    for (let i = 0; i < board.length; i++) {\r\n        for (let j = 0; j < board[i].length; j++) {\r\n            unvisitedNodes.push(board[i][j])\r\n        }\r\n    }\r\n    return unvisitedNodes;\r\n}","export function RecursiveDivision(board, rows, cols) {\r\n  console.log(board); //def working here\r\n  let isHorizontal = true;\r\n  let currentRows = rows / 2;\r\n  let currentCols = cols / 2;\r\n  let wallsInOrder = [];\r\n  recurseBoard(board, currentRows, currentCols, isHorizontal, wallsInOrder);\r\n  return wallsInOrder;\r\n}\r\n\r\nfunction recurseBoard(board, rows, cols, isHorizontal, wallsInOrder) {\r\n  if (rows <= 1 && cols <= 1) {\r\n    return wallsInOrder;\r\n  }\r\n  if (isHorizontal) {\r\n    for (let i = 0; i < board.length; i++) {\r\n      board[i][cols].wall = true;\r\n      wallsInOrder.push(board[i][cols]);\r\n    }\r\n  } else {\r\n    for (let i = 0; i < board[0].length; i++) {\r\n      board[rows][i].wall = true;\r\n      wallsInOrder.push(board[rows][i]);\r\n    }\r\n  }\r\n  console.log(`ROWS: ${rows}, COLS: ${cols}`);\r\n  recurseBoard(board, Math.floor(rows / 2), Math.floor(cols / 2), !isHorizontal, wallsInOrder);\r\n}\r\n","import { useState, useRef } from \"react\";\r\nimport { Dijkstra, getShortestPath } from \"../../pathfindingAlgs/Dijkstra\";\r\nimport { randomAlg } from \"../../pathfindingAlgs/randomAlg\";\r\nimport { RecursiveDivision } from \"../../wallAlgs/RecursiveDivision\";\r\n\r\nconst STARTNODECLASS = \"sc-dkPtRN chrObk\";\r\nconst ENDNODECLASS = \"sc-hKwDye eKwWfH\";\r\nconst WALLCLASS = \"sc-gsDKAQ fmnchj\";\r\nconst EMPTYNODECLASS = \"sc-bdvvtL geuBXe\";\r\n\r\nconst BoardLogic = () => {\r\n  const STARTNODE = {\r\n    row: 9,\r\n    col: 5,\r\n  };\r\n  const FINISHNODE = {\r\n    row: 9,\r\n    col: 40,\r\n  };\r\n\r\n  const createBoard = (ROWS, COLS) => {\r\n    const nodes = [];\r\n    for (let row = 0; row < ROWS; row++) {\r\n      const currRow = [];\r\n      for (let col = 0; col < COLS; col++) {\r\n        currRow.push(createNode(row, col));\r\n      }\r\n      nodes.push(currRow);\r\n    }\r\n    return nodes;\r\n  };\r\n\r\n  const createNode = (row, col) => {\r\n    return {\r\n      row: row,\r\n      col: col,\r\n      wall: false,\r\n      startNode: STARTNODE.row === row && STARTNODE.col === col,\r\n      finishNode: FINISHNODE.row === row && FINISHNODE.col === col,\r\n      hasBeenVisited: false,\r\n      distance: STARTNODE.row === row && STARTNODE.col === col ? 0 : Infinity,\r\n      previousNode: null,\r\n    };\r\n  };\r\n\r\n  const [row, setRow] = useState(20);\r\n  const [col, setCol] = useState(46);\r\n  const [board, setBoard] = useState(createBoard(row, col));\r\n  const [mousePressed, setMousePressed] = useState(false);\r\n  const previousStartNode = useRef(STARTNODE);\r\n  const previousEndNode = useRef(FINISHNODE);\r\n  const [clickedOnTerminalNode, setClickedOnTerminalNode] = useState(false);\r\n  const [startOrEnd, setStartOrEnd] = useState();\r\n\r\n  const getNewBoardWithWall = (board, row, col) => {\r\n    const newBoard = board.slice();\r\n    let node = newBoard[row][col];\r\n    if (node.startNode || node.finishNode) return newBoard;\r\n    node = {\r\n      ...node,\r\n      wall: true,\r\n    };\r\n    newBoard[row][col] = node;\r\n    document.getElementById(`node-${node.row}-${node.col}`).className = WALLCLASS;\r\n    return newBoard;\r\n  };\r\n\r\n  const updateTerminalNodes = (board, row, col) => {\r\n    const newBoard = board.slice();\r\n    let node = newBoard[row][col];\r\n    if (node.wall) return newBoard;\r\n    if (startOrEnd === \"start\") {\r\n      node.startNode = true;\r\n      node.distance = 0;\r\n      newBoard[previousStartNode.current.row][previousStartNode.current.col].startNode = false;\r\n      newBoard[previousStartNode.current.row][previousStartNode.current.col].distance = Infinity;\r\n      document.getElementById(`node-${node.row}-${node.col}`).className = STARTNODECLASS;\r\n      document.getElementById(\r\n        `node-${previousStartNode.current.row}-${previousStartNode.current.col}`\r\n      ).className = EMPTYNODECLASS;\r\n      previousStartNode.current = { row: row, col: col };\r\n    } else if (startOrEnd === \"end\") {\r\n      node.finishNode = true;\r\n      newBoard[previousEndNode.current.row][previousEndNode.current.col].finishNode = false;\r\n      document.getElementById(\r\n        `node-${previousEndNode.current.row}-${previousEndNode.current.col}`\r\n      ).className = EMPTYNODECLASS;\r\n      document.getElementById(`node-${node.row}-${node.col}`).className = ENDNODECLASS;\r\n      previousEndNode.current = { row: row, col: col };\r\n    }\r\n\r\n    return newBoard;\r\n  };\r\n\r\n  const handleMouseLeave = (row, col) => {\r\n    if (clickedOnTerminalNode) {\r\n    }\r\n  };\r\n\r\n  const handleMouseDown = (row, col) => {\r\n    setMousePressed(true);\r\n    let node = board[row][col];\r\n    if (node.startNode || node.finishNode) {\r\n      setClickedOnTerminalNode(true);\r\n      if (node.startNode) setStartOrEnd(\"start\");\r\n      else setStartOrEnd(\"end\");\r\n    } else {\r\n      getNewBoardWithWall(board, row, col);\r\n    }\r\n  };\r\n\r\n  const handleMouseEnter = (row, col) => {\r\n    if (!mousePressed) return;\r\n    if (clickedOnTerminalNode) {\r\n      updateTerminalNodes(board, row, col);\r\n    } else {\r\n      getNewBoardWithWall(board, row, col);\r\n    }\r\n  };\r\n\r\n  const handleMouseUp = () => {\r\n    setMousePressed(false);\r\n    setClickedOnTerminalNode(false);\r\n    setStartOrEnd(null);\r\n  };\r\n\r\n  const startAlgorithm = () => {\r\n    resetBoard(board);\r\n    const visitedNodes = randomAlg(board, STARTNODE, FINISHNODE);\r\n    animateAlgorithm(visitedNodes);\r\n  };\r\n\r\n  const startDijkstra = () => {\r\n    clearBoard();\r\n    const visitedNodes = Dijkstra(board);\r\n    const shortestPath = getShortestPath(\r\n      board[previousEndNode.current.row][previousEndNode.current.col]\r\n    );\r\n    animateAlgorithm(visitedNodes, shortestPath);\r\n  };\r\n\r\n  const startRecurseWalls = () => {\r\n    const wallsInOrder = RecursiveDivision(board, row, col);\r\n    console.log(wallsInOrder);\r\n    animateWallsInOrder(wallsInOrder);\r\n  };\r\n\r\n  const animateWallsInOrder = (wallsInOrder) => {\r\n    for (let i = 0; i < wallsInOrder.length; i++) {\r\n      setTimeout(() => {\r\n        const node = wallsInOrder[i];\r\n        document.getElementById(`node-${node.row}-${node.col}`).className = WALLCLASS;\r\n      }, 10 * i);\r\n    }\r\n  };\r\n\r\n  const animateAlgorithm = (visitedNodes, shortestPath) => {\r\n    for (let i = 0; i < visitedNodes.length; i++) {\r\n      setTimeout(() => {\r\n        const node = visitedNodes[i];\r\n        document.getElementById(\r\n          `node-${node.row}-${node.col}`\r\n        ).className = `${EMPTYNODECLASS} node-visited`;\r\n        if (i === visitedNodes.length - 1) {\r\n          animateShortestPath(shortestPath);\r\n        }\r\n      }, 10 * i);\r\n    }\r\n  };\r\n\r\n  const animateShortestPath = (shortestPath) => {\r\n    for (let i = 0; i < shortestPath.length; i++) {\r\n      setTimeout(() => {\r\n        const node = shortestPath[i];\r\n        document.getElementById(\r\n          `node-${node.row}-${node.col}`\r\n        ).className = `${EMPTYNODECLASS} node-shortestPath`;\r\n      }, 100 * i);\r\n    }\r\n  };\r\n\r\n  const clearBoard = () => {\r\n    for (let i = 0; i < board.length; i++) {\r\n      for (let j = 0; j < board[i].length; j++) {\r\n        const node = board[i][j];\r\n        if (node.startNode) {\r\n          document.getElementById(`node-${node.row}-${node.col}`).className = STARTNODECLASS;\r\n        } else if (node.finishNode) {\r\n          document.getElementById(`node-${node.row}-${node.col}`).className = ENDNODECLASS;\r\n        } else if (node.wall) {\r\n          document.getElementById(`node-${node.row}-${node.col}`).className = WALLCLASS;\r\n        } else {\r\n          document.getElementById(`node-${node.row}-${node.col}`).className = EMPTYNODECLASS;\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  // find better way\r\n  const resetBoard = () => {\r\n    const newBoard = createBoard(row, col);\r\n    setBoard(newBoard);\r\n    previousStartNode.current = STARTNODE;\r\n    previousEndNode.current = FINISHNODE;\r\n    for (let i = 0; i < board.length; i++) {\r\n      for (let j = 0; j < board[i].length; j++) {\r\n        const node = board[i][j];\r\n        if (node.startNode) {\r\n          document.getElementById(`node-${node.row}-${node.col}`).className = STARTNODECLASS;\r\n        } else if (node.finishNode) {\r\n          document.getElementById(`node-${node.row}-${node.col}`).className = ENDNODECLASS;\r\n        } else {\r\n          document.getElementById(`node-${node.row}-${node.col}`).className = EMPTYNODECLASS;\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleSliderChangeCol = (e) => {\r\n    setCol(e.target.value);\r\n    setBoard(createBoard(row, col));\r\n  };\r\n\r\n  const handleSliderChangeRow = (e) => {\r\n    setRow(e.target.value);\r\n    setBoard(createBoard(row, col));\r\n  };\r\n\r\n  return {\r\n    handleMouseDown,\r\n    handleMouseUp,\r\n    handleMouseEnter,\r\n    handleMouseLeave,\r\n    startAlgorithm,\r\n    startDijkstra,\r\n    startRecurseWalls,\r\n    resetBoard,\r\n    handleSliderChangeCol,\r\n    handleSliderChangeRow,\r\n    board,\r\n  };\r\n};\r\n\r\nexport default BoardLogic;\r\n","import React from \"react\";\r\nimport Board from \"./components/Board/Board\";\r\nimport { CssBaseline } from \"@mui/material\";\r\nimport InfoPanel from \"./components/InfoPanel\";\r\nimport BoardLogic from \"./components/Board/BoardLogic\";\r\n\r\nconst PathFinder = () => {\r\n  const {\r\n    handleMouseDown,\r\n    handleMouseUp,\r\n    handleMouseEnter,\r\n    handleMouseLeave,\r\n    startAlgorithm,\r\n    startDijkstra,\r\n    startRecurseWalls,\r\n    resetBoard,\r\n    handleSliderChangeCol,\r\n    handleSliderChangeRow,\r\n    board,\r\n  } = BoardLogic();\r\n  return (\r\n    <>\r\n      <CssBaseline />\r\n      <InfoPanel\r\n        startAlgorithm={startAlgorithm}\r\n        startDijkstra={startDijkstra}\r\n        resetBoard={resetBoard}\r\n        handleSliderChangeCol={handleSliderChangeCol}\r\n        handleSliderChangeRow={handleSliderChangeRow}\r\n        startRecurseWalls={startRecurseWalls}\r\n      />\r\n      <Board\r\n        handleMouseDown={handleMouseDown}\r\n        handleMouseUp={handleMouseUp}\r\n        handleMouseEnter={handleMouseEnter}\r\n        handleMouseLeave={handleMouseLeave}\r\n        board={board}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PathFinder;\r\n","import './App.css';\r\nimport PathFinder from './PathFinder';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <PathFinder />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}